# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  tags:
    include:
    - v0.1.*
  branches:
    include:
    - master
    - develop

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
#  MajorVersion: 0
#  MedianinVersion: 1
#  MinorVersion: 2
#  InitialReleaseTagNumber: 1
#  IncrementReleaseTagNumber: $[counter(variables['InitialReleaseTagNumber'], 0)]  

steps:
- task: Docker@1
  displayName: Login
  inputs:
    containerRegistryType: Container Registry
    dockerRegistryEndpoint: docker-hub
    command: login

- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

#- script: |
#    make build 
#  workingDirectory: '$(modulePath)'
#  displayName: 'Unit Test'

#- script: |
#    make xbuild-all
#  workingDirectory: '$(modulePath)'
#  displayName: 'Cross Compile'

- script: |
    curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    rm Gopkg.lock
    dep ensure -v
    ls -la
    ./bin/goreleaser --snapshot --skip-publish --rm-dist --debug
  workingDirectory: '$(modulePath)'
  displayName: 'Build (GoReleaser)'

#- script: |
#    AZURE_STORAGE_CONNECTION_STRING=$(AZURE_STORAGE_CONNECTION_STRING) make publish
#  workingDirectory: '$(modulePath)'
#  displayName: 'Publish'
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'GitHub - porter-kustomize'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'gitTag'
    title: 'GitHub Release'
    assets: '$(modulePath)/bin/mixins/kustomize/*'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'