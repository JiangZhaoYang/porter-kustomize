{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the porter-kustomize mixin \u00b6 What is porter-kustomize ? \u00b6 Let's start with what is Porter.sh .... \u00b6 Quote A Friendly Cloud Installer for Cloud Native Application Bundles When we deploy to the cloud, most of us aren\u2019t dealing with just a single cloud provider or toolchain. The simplest of applications today need a load balancer, SSL certificate, persistent file storage, DNS, and somewhere in there is your application. One app is installed with Helm, another with the cloud provider\u2019s cli and it is all glued together with magic bash scripts. That is a lot to figure out! \ud83d\ude05 Porter is a cloud installer based on the Cloud Native Application Bundle (CNAB) spec that helps you manage everything together in a single bundle, focusing on what you know best: your application. Porter ships with a number of builtin plugins known as mixins that facilitate deployments of CNAB bundles. Info You should read and undertsand the documentation on the Porter.sh website and GitHub repo along with the CNAB Website and CNAB reference documentation to fully understand the necessary concepts. What is Kustomize ? \u00b6 Quote Kubernetes Native Configuration Management Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. So to what is porter-kustomize ? \u00b6 The porter-kustomize mixin helps extend porter.sh in order to support kustomize.io which provides Kubernetes Native Configuration Management from porter.","title":"Home"},{"location":"#welcome-to-the-porter-kustomize-mixin","text":"","title":"Welcome to the porter-kustomize mixin"},{"location":"#what-is-porter-kustomize","text":"","title":"What is porter-kustomize?"},{"location":"#lets-start-with-what-is-portersh","text":"Quote A Friendly Cloud Installer for Cloud Native Application Bundles When we deploy to the cloud, most of us aren\u2019t dealing with just a single cloud provider or toolchain. The simplest of applications today need a load balancer, SSL certificate, persistent file storage, DNS, and somewhere in there is your application. One app is installed with Helm, another with the cloud provider\u2019s cli and it is all glued together with magic bash scripts. That is a lot to figure out! \ud83d\ude05 Porter is a cloud installer based on the Cloud Native Application Bundle (CNAB) spec that helps you manage everything together in a single bundle, focusing on what you know best: your application. Porter ships with a number of builtin plugins known as mixins that facilitate deployments of CNAB bundles. Info You should read and undertsand the documentation on the Porter.sh website and GitHub repo along with the CNAB Website and CNAB reference documentation to fully understand the necessary concepts.","title":"Let's start with what is Porter.sh...."},{"location":"#what-is-kustomize","text":"Quote Kubernetes Native Configuration Management Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications.","title":"What is Kustomize?"},{"location":"#so-to-what-is-porter-kustomize","text":"The porter-kustomize mixin helps extend porter.sh in order to support kustomize.io which provides Kubernetes Native Configuration Management from porter.","title":"So to what is porter-kustomize?"},{"location":"about/","text":"About the porter-kustomize Mixin \u00b6","title":"About"},{"location":"about/#about-the-porter-kustomize-mixin","text":"","title":"About the porter-kustomize Mixin"},{"location":"development/","text":"Building the Porter-Kustomize Mixin \u00b6 Running Make \u00b6 Note Please install the porter binaries first. Instructions for how to do so on different platforms can be found in the Porter.sh documentation . In order to build the porter-kustomize mixin the following should be run from the command line in the root of the git repository: - 1 make xbuild-all build install which triggers make to build a porter mixin for each supported client platform as the first step. Secondly this command builds a porter-runtime binary which is deployed into the Docker innvocationImage that is run by the main porter client executable. Thirdly, the make installs the newly build binaries into that of the porter client. For example if the user is creating a CNAB bundle on their Mac then the porter client will be for Darwin but the innvocationImage is based on a Linux based container then porter-runtime will be a Linux binary.","title":"Building the Mixin"},{"location":"development/#building-the-porter-kustomize-mixin","text":"","title":"Building the Porter-Kustomize Mixin"},{"location":"development/#running-make","text":"Note Please install the porter binaries first. Instructions for how to do so on different platforms can be found in the Porter.sh documentation . In order to build the porter-kustomize mixin the following should be run from the command line in the root of the git repository: - 1 make xbuild-all build install which triggers make to build a porter mixin for each supported client platform as the first step. Secondly this command builds a porter-runtime binary which is deployed into the Docker innvocationImage that is run by the main porter client executable. Thirdly, the make installs the newly build binaries into that of the porter client. For example if the user is creating a CNAB bundle on their Mac then the porter client will be for Darwin but the innvocationImage is based on a Linux based container then porter-runtime will be a Linux binary.","title":"Running Make"},{"location":"examples/","text":"Example Porter-Kustomize Implementations \u00b6 Deployment of a Complex CNAB Bundle \u00b6 If we look at a complex, but real world relevant scenario, to deploy an application made up of multiple (12) micro-services which simulates an end-to-end solution from Web UI, Shopping Cart, Catalogue, Databases etc. The porter.yaml is below. Yoiu will notice the different sections i.e. install , upgrade and uninstall all look identical. This is because the porter-kustomize mixin is in fact executing exactly the same functionality. As kustomize is simply responsible for generating the kubernetes manifests the actual different behaviour e.g. 1 kubectl apply -f vs. 1 kubectl delete -f is handled by the standard built-in mixin for kubernetes. The generation of the manifests by porter-kustomize for kuberntes to use is in fact identical. porter.yaml \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # This is the configuration for Porter # You must define steps for each action, but the rest is optional # See https://porter.sh/authoring-bundles for documentation on how to configure your bundle # Uncomment out the sections below to take full advantage of what Porter can do! name : Robotshop version : 0.3.2 description : \"Stans Robotshop Application\" invocationImage : porter-robotshop:latest tag : dockerps/porter-robotshop-bundle:latest # Uncomment out the line below to use a template Dockerfile for your invocation image #dockerfile: Dockerfile.tmpl mixins : - exec - kustomize - kubernetes # See https://porter.sh/wiring/#credentials credentials : - name : kubeconfig path : /root/.kube/config parameters : - name : gh_token type : string - name : environment type : string default : local install : - kustomize : description : \"Installing: Use Kustomize to generate the Kubernetes deployment file for Stan's Robotshop\" name : porter-robotshop-install kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Deployment\" manifests : - manifests/ wait : true upgrade : - kustomize : description : \"Upgrading: Use Kustomize to generate the Kubernetes deployment file for Stan's Robotshop\" name : porter-robotshop-upgrade kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Upgrade\" manifests : - manifests/ wait : true uninstall : - kustomize : description : \"Unnstalling: Use Kustomize to generate the Kubernetes deployment file for removal\" name : porter-robotshop-uninstall kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Undeployment\" manifests : - manifests/ wait : true # See https://porter.sh/authoring-bundles/#dependencies #dependencies: # mysql: # tag: deislabs/porter-mysql:latest # parameters: # database-name: wordpress Note As kustomize allows for different parts of the kubernetes manifest yaml to be defined in different locations i.e. local disk remote git repository times to generate the kubernetes manifest can vary by a considerable amount i.e. with many micro-services all pulling base configuration from say GiutHub this introduces quite an overhead timewise. CNAB Bundle Manifest \u00b6 The beginning of the porter.yaml defines information for the generated CNAB bundle. This is lines 6-10 in the porter.yaml file. mixins: \u00b6 This is where we define the mixins to be used as part of the install and uninstall steps in porter. The mixin-runtime binaries will be copied into the docker innvocationImage in order porter can execute the necessary steps. This example defines usage of: - exec (not actually used) kustomize kubernetes credentials : \u00b6 The credentials definition on lines 21-23 is necessary in order that the kubernetes mixin can apply or delete the specified manifests from the given cluster. Creation of the credentials is done using the porter credentials generate command from the cli. parameters: \u00b6 For this advanced exmaple we have defined two parameters that we need to pass to porter as part of the innvocation. These parameters are: - gh_token environment gh_token \u00b6 gh_token is used as our sample application uses a kustomize feature where base kubernetes manifest configurations can be defined independantly from the application and leveraged by the application. These base manifests can be referenced either locally on the filesystem using relative paths or remotely via http/s or point to a git repository. For this example the base manifests are referenced in a remote GitHub repository and in order for the porter-kustomize mixin to access these repos a GitHub token is required to be used when performing a pull request to download the code. This can be seen to be defined on lines 26-27 of the porter.yaml and is used on lines 50-51. environment \u00b6 environment , the second parameter in our example is used to target which physical environment we are deploying to. This is passed to the porter-kustomize mixin as the paths to the environment specific configuration contain the name of the environment e.g. \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" The environment parameter is defined on lines 28-30 and if it is not passed as a commndline parameter to porter at innvocation time will default to the local environment, i.e. the current host in our case, and is used on lines 37-48 of the install step as well as the upgrade and uninstall steps lower down in the porter.yaml . install: - kustomize \u00b6 Looking at the specifics of what the install step does we can see the configuration for the porter-kustomize mixin starts at line 33. We define a description and name for the step which will be output to the console when running the porter install from our commandline (or in out CI/CD tool of choice stdout ). From this example we can see that using the kustomization_input attribute we can pass multiple different micro-services to the porter-kustomize mixin which is shown at lines 37 through 48. Each micro-service is in a separate directory and each is processed sequentially by the mixin. Line 49 is the kubernetes_manifest_output attribute which tells kustomize where to write out the generated kubernetes manifest yaml files. Warning The kubernetes_manifest_output must match what is defined in the subsequent install: for kubernetes configuration block manifests section and attributes which in our example are defined at lines 55-56. install: - kubernetes \u00b6","title":"Usage"},{"location":"examples/#example-porter-kustomize-implementations","text":"","title":"Example Porter-Kustomize Implementations"},{"location":"examples/#deployment-of-a-complex-cnab-bundle","text":"If we look at a complex, but real world relevant scenario, to deploy an application made up of multiple (12) micro-services which simulates an end-to-end solution from Web UI, Shopping Cart, Catalogue, Databases etc. The porter.yaml is below. Yoiu will notice the different sections i.e. install , upgrade and uninstall all look identical. This is because the porter-kustomize mixin is in fact executing exactly the same functionality. As kustomize is simply responsible for generating the kubernetes manifests the actual different behaviour e.g. 1 kubectl apply -f vs. 1 kubectl delete -f is handled by the standard built-in mixin for kubernetes. The generation of the manifests by porter-kustomize for kuberntes to use is in fact identical.","title":"Deployment of a Complex CNAB Bundle"},{"location":"examples/#porteryaml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # This is the configuration for Porter # You must define steps for each action, but the rest is optional # See https://porter.sh/authoring-bundles for documentation on how to configure your bundle # Uncomment out the sections below to take full advantage of what Porter can do! name : Robotshop version : 0.3.2 description : \"Stans Robotshop Application\" invocationImage : porter-robotshop:latest tag : dockerps/porter-robotshop-bundle:latest # Uncomment out the line below to use a template Dockerfile for your invocation image #dockerfile: Dockerfile.tmpl mixins : - exec - kustomize - kubernetes # See https://porter.sh/wiring/#credentials credentials : - name : kubeconfig path : /root/.kube/config parameters : - name : gh_token type : string - name : environment type : string default : local install : - kustomize : description : \"Installing: Use Kustomize to generate the Kubernetes deployment file for Stan's Robotshop\" name : porter-robotshop-install kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Deployment\" manifests : - manifests/ wait : true upgrade : - kustomize : description : \"Upgrading: Use Kustomize to generate the Kubernetes deployment file for Stan's Robotshop\" name : porter-robotshop-upgrade kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Upgrade\" manifests : - manifests/ wait : true uninstall : - kustomize : description : \"Unnstalling: Use Kustomize to generate the Kubernetes deployment file for removal\" name : porter-robotshop-uninstall kustomization_input : - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/catalogue\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/dispatch\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mongodb\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/mysql\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/payment\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/rabbitmq\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/ratings\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/redis\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/shipping\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/user\" - \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/web\" kubernetes_manifest_output : manifests/ set : kustomizeBaseGHToken : \"{{ bundle.parameters.gh_token }}\" - kubernetes : description : \"Perform Robotshop Undeployment\" manifests : - manifests/ wait : true # See https://porter.sh/authoring-bundles/#dependencies #dependencies: # mysql: # tag: deislabs/porter-mysql:latest # parameters: # database-name: wordpress Note As kustomize allows for different parts of the kubernetes manifest yaml to be defined in different locations i.e. local disk remote git repository times to generate the kubernetes manifest can vary by a considerable amount i.e. with many micro-services all pulling base configuration from say GiutHub this introduces quite an overhead timewise.","title":"porter.yaml"},{"location":"examples/#cnab-bundle-manifest","text":"The beginning of the porter.yaml defines information for the generated CNAB bundle. This is lines 6-10 in the porter.yaml file.","title":"CNAB Bundle Manifest"},{"location":"examples/#mixins","text":"This is where we define the mixins to be used as part of the install and uninstall steps in porter. The mixin-runtime binaries will be copied into the docker innvocationImage in order porter can execute the necessary steps. This example defines usage of: - exec (not actually used) kustomize kubernetes","title":"mixins:"},{"location":"examples/#credentials","text":"The credentials definition on lines 21-23 is necessary in order that the kubernetes mixin can apply or delete the specified manifests from the given cluster. Creation of the credentials is done using the porter credentials generate command from the cli.","title":"credentials:"},{"location":"examples/#parameters","text":"For this advanced exmaple we have defined two parameters that we need to pass to porter as part of the innvocation. These parameters are: - gh_token environment","title":"parameters:"},{"location":"examples/#gh_token","text":"gh_token is used as our sample application uses a kustomize feature where base kubernetes manifest configurations can be defined independantly from the application and leveraged by the application. These base manifests can be referenced either locally on the filesystem using relative paths or remotely via http/s or point to a git repository. For this example the base manifests are referenced in a remote GitHub repository and in order for the porter-kustomize mixin to access these repos a GitHub token is required to be used when performing a pull request to download the code. This can be seen to be defined on lines 26-27 of the porter.yaml and is used on lines 50-51.","title":"gh_token"},{"location":"examples/#environment","text":"environment , the second parameter in our example is used to target which physical environment we are deploying to. This is passed to the porter-kustomize mixin as the paths to the environment specific configuration contain the name of the environment e.g. \"kustomize/robotshop/overlays/{{ bundle.parameters.environment }}/cart\" The environment parameter is defined on lines 28-30 and if it is not passed as a commndline parameter to porter at innvocation time will default to the local environment, i.e. the current host in our case, and is used on lines 37-48 of the install step as well as the upgrade and uninstall steps lower down in the porter.yaml .","title":"environment"},{"location":"examples/#install-kustomize","text":"Looking at the specifics of what the install step does we can see the configuration for the porter-kustomize mixin starts at line 33. We define a description and name for the step which will be output to the console when running the porter install from our commandline (or in out CI/CD tool of choice stdout ). From this example we can see that using the kustomization_input attribute we can pass multiple different micro-services to the porter-kustomize mixin which is shown at lines 37 through 48. Each micro-service is in a separate directory and each is processed sequentially by the mixin. Line 49 is the kubernetes_manifest_output attribute which tells kustomize where to write out the generated kubernetes manifest yaml files. Warning The kubernetes_manifest_output must match what is defined in the subsequent install: for kubernetes configuration block manifests section and attributes which in our example are defined at lines 55-56.","title":"install: - kustomize"},{"location":"examples/#install-kubernetes","text":"","title":"install: - kubernetes"}]}